<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode_37</title>
    <link href="/2020/09/15/leetcode-37/"/>
    <url>/2020/09/15/leetcode-37/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Leetcode-37-解数独"><a href="#Leetcode-37-解数独" class="headerlink" title="Leetcode 37 解数独"></a>Leetcode 37 解数独</h1><h2 id="不多BB，上题目"><a href="#不多BB，上题目" class="headerlink" title="不多BB，上题目"></a>不多BB，上题目</h2><p><a href="https://leetcode-cn.com/problems/sudoku-solver/" target="_blank" rel="noopener">37.解数独</a> 难度 <strong>困难</strong></p><p>编写一个程序，通过已填充的空格来解决数独问题。</p><p>一个数独的解法需遵循如下规则：</p><p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。<br>空白格用 ‘.’ 表示。</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>​                                                                                    一个数独。</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>​                                                                                答案被标成红色。</p><p><strong>Note:</strong></p><ul><li>给定的数独序列只包含数字 <code>1-9</code> 和字符 <code>&#39;.&#39;</code> 。</li><li>你可以假设给定的数独只有唯一解。</li><li>给定数独永远是 <code>9x9</code> 形式的。</li></ul><h2 id="想法与思路"><a href="#想法与思路" class="headerlink" title="想法与思路"></a>想法与思路</h2><p>​        这题拿到手，只能说日了狗了，平时自己动手做数独都要死了，还要写程序去填充整个数独，这怎么玩？ 好在计算机就是牛逼，可以帮我思考，帮我计算，我们只需要告诉他们（计算机），麻烦你们从第一行开始，一行一行地，从左到右，从上到下，直到搜索到最后一行，每次遇到空白格，你就试着往里面填数字1到9，给我搜到底就完事了，实际上时间复杂度也到了<em>O</em>(9^(9X9))，即最多有 9X9 个空白格，每个格子可以填 [1,9] 中的任意整数，就是暴力，给我炸。</p><p>​       什么数字可以填？或者说这个数字有没有什么约束？当然有，题目要求同一行，同一列，同一个格子都不能出现相同数字，所以我们搜索之前就要确定好哪一行，哪一列，哪一个格子已经出现了对应数字，在搜索的时候，这些已经填过数字的行、列、格子就要避免，在一次次尝试填入数字的时候，也要把新填入的数字对应的行、列、格子上的约束更新，告诉下一次搜索，这一行、列、格子被老子占了，你给我往后稍稍，别动老子的位置。</p><p>​      你以为你这样子一行填完，下面的行按照你填好的行来填数独就一定不冲突？做梦吧，小老弟，如果你这一行填的，让下一行填不下去了，你就老老实实地给我恢复成原样，所有行、列、格子对应的约束都恢复，代表你不再占用了，然后格子里的数字也给老子恢复成空白，这一步就叫做回溯。</p><p>​     搜索到什么时候我们认为结束了，没错，当你搜索完最后一行的时候，也就是行下标等于9，已经是搜索到第10行了，你说是不是搜完了？算法结束，我们下期见，( ^_^ )/~~拜拜。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//记录行是否被使用</span><br>    <span class="hljs-keyword">int</span>[][] rows = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">9</span>][<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//记录 列 是否被使用</span><br>    <span class="hljs-keyword">int</span>[][] cols = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">9</span>][<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//记录每个格子 是否被使用</span><br>    <span class="hljs-keyword">int</span>[][] boxes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">9</span>][<span class="hljs-number">10</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; board.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; board[i].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-string">'.'</span>) &#123;<br>                    <span class="hljs-keyword">int</span> n = board[i][j] - <span class="hljs-string">'0'</span>;<br>                    <span class="hljs-keyword">int</span> nr = i / <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">int</span> nc = j / <span class="hljs-number">3</span>;<br>                    rows[i][n] = <span class="hljs-number">1</span>;<br>                    cols[j][n] = <span class="hljs-number">1</span>;<br>                    boxes[nr * <span class="hljs-number">3</span> + nc][n] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">fill</span>(board,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-comment">//找到了结果</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//下一个搜索列的坐标</span><br>        <span class="hljs-keyword">int</span> nc = (j + <span class="hljs-number">1</span>) % <span class="hljs-number">9</span>;<br>        <span class="hljs-comment">//下一个搜索行的坐标</span><br>        <span class="hljs-keyword">int</span> nr = (nc == <span class="hljs-number">0</span>) ? i + <span class="hljs-number">1</span> : i;<br>        <span class="hljs-comment">//如果是数字，进行递归求解</span><br>        <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-string">'.'</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">fill</span>(board,nr,nc);<br><br>        <span class="hljs-comment">//穷举空白格，从1到9</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> digit = <span class="hljs-number">1</span>; digit &lt;=<span class="hljs-number">9</span>; digit++) &#123;<br>            <span class="hljs-keyword">int</span> br = i / <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">int</span> bc = j / <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">int</span> boxes_key = br * <span class="hljs-number">3</span> + bc;<br>            <span class="hljs-comment">//当且仅当该数字可用时再填入</span><br>            <span class="hljs-keyword">if</span> (rows[i][digit] != <span class="hljs-number">1</span> &amp;&amp; cols[j][digit] != <span class="hljs-number">1</span> &amp;&amp; <br>            boxes[boxes_key][digit] != <span class="hljs-number">1</span>) &#123;<br>                rows[i][digit] = <span class="hljs-number">1</span>;<br>                cols[j][digit] = <span class="hljs-number">1</span>;<br>                boxes[boxes_key][digit] = <span class="hljs-number">1</span>;<br>                board[i][j] = (<span class="hljs-keyword">char</span>) (digit + <span class="hljs-string">'0'</span>);<br>                <span class="hljs-comment">//递归</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fill</span>(board,nr,nc)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">//回溯</span><br>                board[i][j] = <span class="hljs-string">'.'</span>;<br>                rows[i][digit] = <span class="hljs-number">0</span>;<br>                cols[j][digit] = <span class="hljs-number">0</span>;<br>                boxes[boxes_key][digit] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printBoard</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; board.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; board[i].length;j++) &#123;<br>                System.out.<span class="hljs-built_in">print</span>(board[i][j] + <span class="hljs-string">" "</span>);<br>            &#125;<br>            System.out.<span class="hljs-built_in">println</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        Leetcode_37 leetcode_37 = <span class="hljs-keyword">new</span> Leetcode_37();<br>        <span class="hljs-keyword">char</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[][]&#123;<br>                &#123;<span class="hljs-string">'5'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>&#125;,<br>                &#123;<span class="hljs-string">'6'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>&#125;,<br>                &#123;<span class="hljs-string">'.'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'.'</span>&#125;,<br>                &#123;<span class="hljs-string">'8'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'3'</span>&#125;,<br>                &#123;<span class="hljs-string">'4'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'1'</span>&#125;,<br>                &#123;<span class="hljs-string">'7'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'6'</span>&#125;,<br>                &#123;<span class="hljs-string">'.'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'.'</span>&#125;,<br>                &#123;<span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'5'</span>&#125;,<br>                &#123;<span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'9'</span>&#125;<br>        &#125;;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"调用函数前的board: "</span> );<br>        leetcode_37.printBoard(board);<br>        leetcode_37.solveSudoku(board);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"调用函数后的board: "</span> );<br>        leetcode_37.printBoard(board);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区块链学习</title>
    <link href="/2020/09/01/block-learn/"/>
    <url>/2020/09/01/block-learn/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="区块链是什么"><a href="#区块链是什么" class="headerlink" title="区块链是什么"></a>区块链是什么</h1><p>分布式、去中心化，一种分布式的（数据库），做一系列信息的数字化碎片模块，信息包括交易日期、金额等，每个人都可以参与其中的信用记录，并且由于使用了多重私钥，很难被破解。</p><h1 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h1><p>比特币就是一个利用共有区块链技术的一种去中心化的加密货币，创始人中本聪利用区块链技术推出了比特币。交易规模小，一秒仅7笔。</p><h1 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h1><p>挖矿的本质就是通过各种机器，显卡去计算随机数，拿到随机数，就更有记账的机会。就是根据上一个区块的哈希值拿到下一个哈希值，再添加下一个区块。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About</title>
    <link href="/2020/08/31/about/"/>
    <url>/2020/08/31/about/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="他的一生中没有青春少年的意气风发，也没有声色犬马的享乐，有的只是坎坷的生活和孤灯下日复一日的苦读。-——BoscoTao"><a href="#他的一生中没有青春少年的意气风发，也没有声色犬马的享乐，有的只是坎坷的生活和孤灯下日复一日的苦读。-——BoscoTao" class="headerlink" title="他的一生中没有青春少年的意气风发，也没有声色犬马的享乐，有的只是坎坷的生活和孤灯下日复一日的苦读。   ——BoscoTao"></a>他的一生中没有青春少年的意气风发，也没有声色犬马的享乐，有的只是坎坷的生活和孤灯下日复一日的苦读。   ——BoscoTao</h1>]]></content>
    
    
    
    <tags>
      
      <tag>自我介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx学习</title>
    <link href="/2020/08/31/nginx-8-31/"/>
    <url>/2020/08/31/nginx-8-31/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="WEB高性能的解决方案"><a href="#WEB高性能的解决方案" class="headerlink" title="WEB高性能的解决方案"></a><strong>WEB高性能的解决方案</strong></h1><p>CDN - 高效的磁盘IO处理能力</p><p>七层/四层负载均衡： 高效的网络协议处理能力</p><ul><li>正向代理</li><li>反向代理</li></ul><p>整合Lua语言的负载均衡： 丰富而完善的生态</p><ul><li><p>API网关</p></li><li><p>Waf防火墙</p></li></ul><h1 id="Nginx-worker分流"><a href="#Nginx-worker分流" class="headerlink" title="Nginx-worker分流"></a><strong>Nginx-worker分流</strong></h1><p>​    nginx是多进程，防止某个线程引用错误的地址空间，地址越界导致整个Nginx崩掉。nginx进程重启，更新nginx.conf，配置脚本更新,nginx -s reload，老worker进程在现存的连接结束后，再优雅地切换成新worker进程。</p><h1 id="Nginx-Location-范例"><a href="#Nginx-Location-范例" class="headerlink" title="Nginx-Location 范例"></a><strong>Nginx-Location 范例</strong></h1><p>Location配置块定义具体的uri应该如何想要</p><ul><li>= 精确匹配 优先级1</li><li>^~ 非正则匹配 优先级2</li><li>~ 区分大小写的正则匹配  优先级3</li><li><strong>~* 不区分大小写的正则匹配 优先级3</strong></li><li>/ 通用匹配 优先级4</li></ul><p>“/“ ——&gt;  location = / {[ configuration A]}</p><p>“index.html”  ——&gt;  location  / {[ configuration B]}</p><p>“/documents/document.html” ——&gt;  location  /documents/  {[ configuration C]}</p><p>“/images/1.gif”   ——&gt;  location ^~ /images/  {[ configuration D]}</p><p>“/documents/1.jpg” ——&gt;  location ~*  .(gif|jpg|png)$   {[ configuration E]}</p><p>优先级越低的应该写在最前面</p><h1 id="Nginx-upstream负载策略"><a href="#Nginx-upstream负载策略" class="headerlink" title="Nginx-upstream负载策略"></a><strong>Nginx-upstream负载策略</strong></h1><p>Syntax: server 轮询| weight | ip_hash | least_conn</p><ul><li>轮询：默认的负载均衡策略，每个请求按照时间顺序逐一分配到不通的后端服务器</li><li>weight： 权重方式，在轮询的策略基础上制定轮询的几率</li><li>ip_hash: 基于客户端IP的分配方式，确保相同的客户端请求一直发到相同的服务器，保证session会话</li><li>least_conn: 把请求转发给连接数较少的后端服务器</li></ul><h1 id="Nginx-健康检查"><a href="#Nginx-健康检查" class="headerlink" title="Nginx-健康检查"></a><strong>Nginx-健康检查</strong></h1><p>​    Nginx默认使用<strong>被动健康检查</strong></p><p>​    fail_timeout时间内出现max_fails次错误</p><p>​    server就被标记为不可用，并惩罚fail_timeout时间不分发请求过来；</p><p>​    即： 30s内出现10次错误server即不可用，30s后重新探测一次</p><p><strong>注： 全部upstream server挂掉后，立刻一次性恢复</strong></p><p>​    connect refuse 和 timeout 永久性错误，proxy_next_upstream选择性定义错误</p><p>​    timeout 控制指令  ：</p><ol><li>​    proxy_connect_timeout： 建链_三次握手时间</li><li>​    proxy_read_timeout ：     建链成功_等待后端服务器响应时间_后端服务器处理请求的时间</li><li>proxy_send_timeout ： 数据回传间隔时间_网络卡时相邻两次数据传输间隔时间</li></ol><h1 id="Nginx-动态缓存"><a href="#Nginx-动态缓存" class="headerlink" title="Nginx-动态缓存"></a><strong>Nginx-动态缓存</strong></h1><p>proxy_cache    tmp-test;                                            缓存的目录</p><p>proxy_cache_valid    200 206 304 301 302 1d;    返回制定状态码的内容被缓存，缓存时间1天</p><p>proxy_cache_key    $uri;</p><p>location ~ /purge(/.*) {                   —–将/purge/$1 对应的 </p><p>​                                                                /tmp-test/$1 缓存文件清理</p><p>​        allow all;</p><p>​        proxy_cache_purge temp-test $1;</p><p>​        header_filter-by_lua ‘ngx.header[“Server”] = “xxxx”‘</p><p>}</p><h1 id="Nginx-会话保持"><a href="#Nginx-会话保持" class="headerlink" title="Nginx-会话保持"></a><strong>Nginx-会话保持</strong></h1><p>Syntax ： sticky [name=rotes] [domain=.foo.bar] [path=/]</p><p>​                            [expires=1h] [hash=index|md5|sha1] [no_fallback]</p><p>​                            [secure] [httponly]</p><ul><li><p>name 记录会话的cookie名称；</p></li><li><p>domain 设置cookie作用的域名；</p></li><li><p>path 设置cookie作用的url路径，默认根目录；</p></li><li><p>expires 设置cookie生存周期，默认不设置，浏览器关闭失效</p></li><li><p>hash 设置cookie中服务器的表示使用明文还是MD5值，默认MD5；</p></li><li><p>no_fallback 设置该选项, 当sticky的后端机器挂了以后，nginx返回502，而不<br>转发到其他服务器，不建议设置</p></li><li><p>secure 设置启用安全的cookie，需要https的支持</p></li><li><p>httponly 允许cookie不通过JS泄露</p></li></ul><h1 id="Nginx-waf"><a href="#Nginx-waf" class="headerlink" title="Nginx-waf"></a><strong>Nginx-waf</strong></h1><p>Web应用程序防火墙（WAF），GAP-Nginx通过第三方扩展模块方式集成ModSecurity，为应用提供WAF能力，弥补应用防护空缺，ModSecurity主要功能：</p><ul><li><p>防止SQL注入攻击，交叉站点脚本攻击（XSS)等</p></li><li><p>并行文本匹配</p></li><li><p>Lua扩展API为开发者提供一个脚本平台以实现用于保护Web应用的复杂逻辑</p></li><li><p>开启waf功能，Nginx收到的每个HTTP请求都会进过waf本地规则库进行扫描，损失性能与启用的防护规则数量相关。    </p><p> server {</p></li></ul><p>​    listen 8090;</p><p>​    modsecurity on;</p><p>}</p><h1 id="部署方式-主备高可用"><a href="#部署方式-主备高可用" class="headerlink" title="部署方式-主备高可用"></a><strong>部署方式-主备高可用</strong></h1><p>​    HA高可用方案是指采用主从热备的部署方式，一主一从，主服务器宕机，从服务器可以接替主服务器提供服务，从而实现高可用。为了实现主从热备部署，有需要使用keepalive的检测软件。从服务检测主服务的健康状态，在从服务发现主服务故障时，从服务夺取主服务对外提供服务的IP地址（VIP)，从服务对外服务，故障主服务不再收到服务请求，实现流量接入高可用。</p><h1 id="keepalived工作原理"><a href="#keepalived工作原理" class="headerlink" title="keepalived工作原理"></a><strong>keepalived工作原理</strong></h1><p><img src="/2020/08/31/nginx-8-31/keepalived.png" srcset="/img/loading.gif" lazyload alt="avatar"></p><p>定义： <strong>（维基百科）</strong></p><p>​    存活信号通常以一定的时间间隔发出，其在<a href="https://zh.wikipedia.org/wiki/互联网" target="_blank" rel="noopener">互联网</a>上扮演了至关重要的角色。若一端在信号发出后未收到回复，则可判定<a href="https://zh.wikipedia.org/wiki/数据链路" target="_blank" rel="noopener">数据链路</a>离线并将之后的数据包重新路由到其他链路，直到旧链路重新上线为止。存活信号也可表示保留连接状态。若无存活信号，启用<a href="https://zh.wikipedia.org/wiki/网络地址转换" target="_blank" rel="noopener">网络地址转换</a>的<a href="https://zh.wikipedia.org/wiki/路由器" target="_blank" rel="noopener">路由器</a>将于超时后中断连接。</p><p>​    由于存活信息仅用于表示链路状态及保留连接，其应言简意赅且仅仅占用较少的<a href="https://zh.wikipedia.org/wiki/带宽_(计算机)" target="_blank" rel="noopener">带宽</a>。但是，存活信息的格式及用法根据传输协议的不同而有所差异。      </p><p>安装主从脚本，检查进程：ps -ef| grep keepalived， 应该有两个keepalived进程。</p><p>rpm -ivh  ***.rpm    安装软件</p><p> -i 　显示套件的相关信息。 -h或–hash 　套件安装时列出标记。 -v 　显示指令执行过程。</p><p>master不能把vip抢回来，滚动实现，网络抖动情况需要判断原因再切换。</p><h1 id="部署方式-集群高可用"><a href="#部署方式-集群高可用" class="headerlink" title="部署方式-集群高可用"></a><strong>部署方式-集群高可用</strong></h1><p>​    应用系统的在高流量场景下（TPS&gt;=16000)，推荐使用软负载均衡集群进行部署。负载均衡按照网络层次分成多个层级。四层和七层负载均衡是负载均衡建设的两个主要方面。四层负载均衡是基于网络四层IP和端口的负载均衡，七层负载均衡是基于七层网络协议。</p><h1 id="Spring-cloud-gateway"><a href="#Spring-cloud-gateway" class="headerlink" title="Spring cloud gateway"></a><strong>Spring cloud gateway</strong></h1><p>​    This project provides a library for building an API Gateway on top of Spring MVC. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.</p><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a><strong>JWT</strong></h1><p>​    JSON WEB Token （JWT) 是一个开放标准（RFC 7519)，它定义了一种紧凑和自包含的方式，用于在各方之间作为json对象安全的传输信息，此信息可以通过数字签名进行验证和信任。</p><p>​    JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">"姓名"</span>: <span class="hljs-string">"张三"</span>,<br>  <span class="hljs-string">"角色"</span>: <span class="hljs-string">"管理员"</span>,<br>  <span class="hljs-string">"到期时间"</span>: <span class="hljs-string">"2018年7月1日0点0分"</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>川香-昭和往事</title>
    <link href="/2020/08/06/chuanxiang/"/>
    <url>/2020/08/06/chuanxiang/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="人人都骂孙笑川，人人都是孙笑川"><a href="#人人都骂孙笑川，人人都是孙笑川" class="headerlink" title="人人都骂孙笑川，人人都是孙笑川"></a>人人都骂孙笑川，人人都是孙笑川</h1><iframe src="//player.bilibili.com/player.html?aid=56396942&bvid=BV1s4411u7fA&cid=98540481&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><img src="/2020/08/06/chuanxiang/1.jpg" alt="avatar"></p><center>川香<center>在这个世界如果<center>你交不出来闪现<center>减八千<center>就不敢再继续网恋<center>带明星<center>被坏女人蒙蔽了双眼<center>打开一个手机看见<center>司马脸<center>献祭了家里人<center>只为能恰烂钱<center>如今却是百口莫辩<center>川剧变脸<center>有个锤子牌面<center>【chorus】<center>还记得我互动邻居口吐芬芳<center>一脚把奶奶踹倒在地上<center>飞机场的那一夜我多绝望<center>找物管<center>才九点半我凭啥关窗<center>你再骂<center>我也都不放在心上<center>给爷爬<center>参加你妈的灵堂<center>难道要我<center>一直一直笑吗<center>抱歉做不到<center>不会发就别发<center>是不是脑袋有泡<center>好久都没有<center>见到深海哥<center>你看我来不来就完事了<center>我透你妈<center>会说话你就多说点<center>滚出克8知道播什么反正随缘<center>我赚8亿日元<center>在日本新津县盖宫殿<center>直播间别扣b<center>一问三8知的<center>憨憨弟中之弟<center>没用过淘宝<center>铁龙铭像个Hape<center>辣真的牛皮<center>家乡的Sakura<center>盛开辣<center>没有猫，也没妈，哦哦~<center>每个人都想拥有懒的机会，哦哦~<center>蹲在路边一夜眼神多颓废<center>只当交了八千的智商税<center>【chorus】<center>还记得我互动邻居口吐芬芳<center>一脚把奶奶踹倒在地上<center>飞机场的那一夜我多绝望<center>找物管<center>才九点半我凭啥关窗<center>你再骂<center>我也都不放在心上<center>爬起来<center>找到自己的天堂<center>【chorus】<center>还记得我互动邻居口吐芬芳<center>一脚把奶奶踹倒在地上<center>飞机场的那一夜我多绝望<center>找物管<center>才九点半我凭啥关窗<center>你再骂<center>我也都不放在心上<center>爬起来<center>忘掉昨日的悲伤 <blockquote><p>人们只知道那天，我被骗走了八千块人民币。人们其实不知道的是，比八千块更贵重的东西，你骗走了我爱你，你说四季变换的速度是秒速五厘米，就像双流机场的那个夜晚时间流逝的速度，那么快，那么慢。</p></blockquote></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center></center>]]></content>
    
    
    
    <tags>
      
      <tag>抽象圣经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22至23岁，所有的经历与情感如风飘过。</title>
    <link href="/2020/07/29/birthday/"/>
    <url>/2020/07/29/birthday/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="韬桑，家乡的Sakura盛开啦，没有猫，也没她，哦哦"><a href="#韬桑，家乡的Sakura盛开啦，没有猫，也没她，哦哦" class="headerlink" title="韬桑，家乡的Sakura盛开啦，没有猫，也没她，哦哦~"></a>韬桑，家乡的Sakura盛开啦，没有猫，也没她，哦哦~</h1><!-- 简单示例 (id, server, type)  -->    <div id="aplayer-gmpZQohB" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="001DrNr22581j8" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"></div><h1 id="瞎扯……未完待续"><a href="#瞎扯……未完待续" class="headerlink" title="瞎扯……未完待续"></a>瞎扯……未完待续</h1><p>​        怎么说呢，2019年7月之后每一天日子都过的十分浑浑噩噩，社畜的这一年，经历了很多事，工作上，社交上，亲情，友情等等，全身心疲惫，精神上已经十分麻木，很多事情对我来说已经觉得不值一提，但我还是要保持着年轻人该有的热情与朝气。</p><p>​      作为一个年轻人，抱怨是没有用的，唯一能做的就是振作，努力，抛弃沮丧，让变得更强大，人生短短几个秋，开心也是24小时，不开心也是24小时，一定要每天都开开心心的。</p><p>​     这个世界很多事情是不公平的，怎么可能公平？不要太天真。</p><p>​    转移一下你的注意力吧哥们，以后真碰到你想爱的人你没有那个能力再后悔就来不及了。   </p><p>  <img src="/2020/07/29/birthday/5.jpg" alt="avatar"></p><p>​      从大一下学期开始熬夜，到现在很多年了，每天的平均睡眠时间不足5小时，确实能感受到明显智商下降，脑袋的反应能力下降，很多算法题看题解要看很久才明白，阅读文章、邮件、书籍的速度也很慢，经常要回读，引以为戒，要早睡才行了。(您是不是因为太软弱了，所以才如此骄傲地来炫耀自己的痛苦？)</p><p>​     <img src="/2020/07/29/birthday/2.jpg" alt="avatar"></p><p>​                                                        繁华的奢侈品店，不知道什么时候能从容进去买东西。</p><p><img src="/2020/07/29/birthday/3.jpg" alt="avatar"></p><p>​                                                            深圳群今早分享的一个有意思的图。</p><p><img src="/2020/07/29/birthday/1.jpg" alt="avatar"></p><p>我最喜欢的就是港式茶餐厅里的甜点，冻柠茶，鸳鸯奶茶，柠檬红茶。</p><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p>以后想到什么再加,多谢观看。</p><h1 id="最后就以王靖雯的天籁之音收尾吧"><a href="#最后就以王靖雯的天籁之音收尾吧" class="headerlink" title="最后就以王靖雯的天籁之音收尾吧"></a>最后就以王靖雯的天籁之音收尾吧</h1><iframe src="//player.bilibili.com/player.html?aid=20993842&bvid=BV1XW411u7ZR&cid=34421821&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">     </iframe><blockquote><p>来又如风，离又如风，或世事通通不过是场梦。 </p></blockquote><!--  -->]]></content>
    
    
    
    <tags>
      
      <tag>人生感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode每日一题吐槽</title>
    <link href="/2020/07/22/DailyRecord/"/>
    <url>/2020/07/22/DailyRecord/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天工作日，按照日常，就打开了每日一题做做，没想到来了一道easy，还和昨天做的一模一样（我以为的），于是我直接用昨天的思路，二分法去找最小值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">剑指 Offer 11. 旋转数组的最小数字</span><br><span class="line">把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组</span><br><span class="line">的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] </span><br><span class="line">的一个旋转，该数组的最小值为1。  </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：[3,4,5,1,2]</span><br><span class="line">输出：1</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：[2,2,2,0,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>我的错误代码： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minArray(int[] numbers) &#123;</span><br><span class="line">        if (numbers &#x3D;&#x3D; null || numbers.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int len &#x3D; numbers.length;</span><br><span class="line">        int left &#x3D; 0;</span><br><span class="line">        int right &#x3D; len - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid &#x3D; ( (right - left) &gt;&gt; 1) + left;</span><br><span class="line">            if (numbers[mid] &lt; numbers[right]) &#123;</span><br><span class="line">                right &#x3D; mid;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                left &#x3D; mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return numbers[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/22/DailyRecord/error.png" alt="avatar"></p><p>我总是倒在了     [1,3,3], [3,3,1,3] 这样的测试案例上，这时候我才发现这题和昨天做的【<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener">153. 寻找旋转排序数组中的最小值</a>】不一样，最大的难点和区别在于这个题的有序数组是可以包含重复元素的，也就是说当你发现mid的值和right值相等的时候，无法确定最小值在mid的左边还是右边！</p><p>我一直苦苦的调试，找解决方案，终究不得解。</p><p>最后打开了题解，发现了大神们的做法是每当发现mid的值和right的值相等的时候，right就往前退一位，这样就很好地排除了重复元素，实在是一个高明的做法，<strong>太秀了</strong>！</p><p>附AC代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minArray(int[] numbers) &#123;</span><br><span class="line">        if (numbers &#x3D;&#x3D; null || numbers.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int len &#x3D; numbers.length;</span><br><span class="line">        int left &#x3D; 0;</span><br><span class="line">        int right &#x3D; len - 1;</span><br><span class="line">        &#x2F;**</span><br><span class="line">        [1,3,3]</span><br><span class="line">        [3,3,1,3]</span><br><span class="line">        [1,2,3,4,5]</span><br><span class="line">        [4,5,1,2,3]</span><br><span class="line">        [1,2,3,4,5,6,7]</span><br><span class="line">        [6,7,1,2,3,4,5]</span><br><span class="line">        [4,5,6,7,1,2,3]</span><br><span class="line">        *&#x2F;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid &#x3D; ( (right - left) &gt;&gt; 1) + left;</span><br><span class="line">            if (numbers[mid] &lt; numbers[right]) &#123;</span><br><span class="line">                right &#x3D; mid;</span><br><span class="line">            &#125;else if (numbers[mid] &gt; numbers[right])&#123;</span><br><span class="line">                left &#x3D; mid + 1;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                &#x2F;&#x2F;去重</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return numbers[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>You know that why your girls never send message to you and your funds always at a loss.</p><p>你知道为什么女孩子永远不给你主动发消息，也知道为什么基金总是亏钱。</p></blockquote><blockquote><p>If you’re not satisfied with the life you’re living, don’t just complain. Do something about it.<br>对于现况的不满，你不能只是抱怨，而是要有勇气作出改变。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>人生感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春风路的那些事</title>
    <link href="/2020/07/10/%E6%98%A5%E9%A3%8E%E8%B7%AF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <url>/2020/07/10/%E6%98%A5%E9%A3%8E%E8%B7%AF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="走在春风路"><a href="#走在春风路" class="headerlink" title="走在春风路"></a>走在春风路</h1><p>一个有名的罗湖区春风路技师会收到舔狗们源源不断的预约请求，每一个预约请求都可以选择接或则不接。</p><p>在每次给客人服务之间要有休息时间，因此她不能接受相邻的预约。</p><p>现在给定一个预约客人小费序列，代表每个客人会给的小费，请你替技师找到一个最优的预约集合（总小费金额最多），返回总的小费金额。</p><p>注意：本题相对原题稍作改动。</p><p>示例 1：</p><p>输入：[1,2,3,1]<br>输出：4<br>解释：选择和 1 号客人预约和 3 号客人预约，总小费：1+3=4</p><p>示例 2 ：</p><p>输入：[2,7,9,3,1]<br>输出：12<br>解释：先和 1 号顾客 (金额 = 2), 再和 3 号顾客 (金额 = 9)，接着和 5 号顾客 (金额 = 1)。</p><p>示例 3 ：</p><p>输入：[2,1,4,5,3,1,1,3]<br>输出：12<br>解释: 和1号，3号，5号，8号预约，总小费金额 = 2 + 4 + 3 +3 = 12。</p><p>[^独自莫凭栏，无限江山，别时容易见时难。]: </p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dijkstra Algorithm</title>
    <link href="/2020/07/09/DijkstraAlgorithm/"/>
    <url>/2020/07/09/DijkstraAlgorithm/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1 . 题目"></a>1 . 题目</h1><p>成研访客</p><p>描述：访客来到成研办公场地，需要找到具体的到访区域。现各个区域间可到达关系已知、耗时已知，请为访客设计一条最省时的路径。例如，访客需访问普惠金融组，可选择多种路径：大厅-&gt;二楼电梯厅-&gt;B区-&gt;A区，大厅-&gt;二楼电梯厅-&gt;E区-&gt;D区-&gt;中部电梯-&gt;A区，大厅-&gt;二楼电梯厅-&gt;E区-&gt;D区-&gt;C区-&gt;A区等，其中，选择大厅-&gt;二楼电梯厅-&gt;B区-&gt;A区最快。</p><p>输入1：节点个数，节点按照字母顺序编号。</p><p>输入2：字符串表示，可达节点间耗时。</p><p>输入3：输入为访客当前位置。</p><p>输入4：访客目的地。</p><p>输出：输入最短耗时。如无路径输出字符串NONE。</p><p>示例：</p><p>输入1:8</p><p>输入2:a-&gt;b:4,b-&gt;h:1,b-&gt;e:2, e-&gt;d:1, h-&gt;g:1, h-&gt;c:2, g-&gt;f:2, g-&gt;c:5, f-&gt;c:2, c-&gt;d:1</p><p>输入3：a</p><p>输入4：d</p><p>输出：abed</p><p>解释：从a到d共有4种走法：a-&gt;b-&gt;e-&gt;d，耗时7；a-&gt;b-&gt;h-&gt;g-&gt;c-&gt;d，耗时9；a-&gt;b-&gt;h-&gt;g-&gt;f-&gt;c-&gt;d，耗时11；a-&gt;b-&gt;h-&gt;c-&gt;d，耗时8。可知第一种走法耗时最短，输出abed。</p><h1 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h1><p>（1）分析题目，已知节点个数以及不同节点之间的路径，给出初始节点与目的节点，求初始节点与目的节点之间的最短路径，如果存在则输出路径，不存在则输出NONE。可以很明显的看出来这是一个有权图中求单源最短路径的问题，而且不存在负边权，可以使用dijkstra算法，求出任何一个起点到终点的最短路径。<br>（2）dijkstra算法的基本思想：首先构建一个邻接矩阵，初始化为一个尽量大的数，标识不可达（如MAX=1000000），用来记录节点之间的路径关系，然后根据题目条件设置邻接矩阵，比如a-&gt;b:4，那么邻接矩阵matrix[0][1]=4。<br>（3）构建完邻接矩阵后，再新建一个dis数组、一个pre数组、一个visited数组，分别代表源节点到各个节点的最短路径值，到达最短路径值的前驱节点、节点是否被访问。<br>（4）初始化dis数组为MAX，代表都不可达<br>（5）初始化pre数组为自身节点,pre[i]=i。<br>（6）初始化visited数组为FALSE，代表都未被访问<br>（7）算法开始，从源节点start开始，dis[start]=0。<br>（8）从visited数组中找到未访问的节点{a,b,c,d,e,f,g,h}中dis最小的一个，很明显一开始是start节点遍历，如start=a,从a节点开始，将a节点设置visited数组为已访问节点u，遍历未访问节点v的邻接矩阵，找到一个最短耗时节点,如果通过这个节点中转后路径耗时更短的话，即dis[u] + matrix[u][v] &lt; dis[v]，更新dis[v]，更新其前驱节点为u。<br> (9)继续从未访问节点中遍历，找到未访问节点中路径耗时最小的，作为新的访问初始节点u，并将u设置visited数组为已访问，再遍历未访问节点v的邻接矩阵，找到一个最短耗时，如果通过这个节点中转后路径耗时更短的话，dis[u] + matrix[u][v] &lt; dis[v]，更新dis[v]，更新其前驱节点为u。<br>（10） 直到遍历结束，得到一个计算后的dis数组和pre数组，可以查看源点到其他点的最短路径耗时，如果要查看最短路径，则由pre数组倒推可得到。<br>（11）算法结束</p><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">package com.lihaitao.algorithm;</span><br><span class="line"></span><br><span class="line">import Java.util.Arrays;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* Created by Administrator on 2020&#x2F;7&#x2F;8.</span><br><span class="line">*&#x2F;</span><br><span class="line">public class ChengYanVisitor &#123;</span><br><span class="line">   public static int MAXV &#x3D; 1000000;</span><br><span class="line">   public static String getShortestPath(int iNodes, String strInitPath, String strStart, String strEnd)&#123;</span><br><span class="line">       boolean[] visted &#x3D; new boolean[iNodes];</span><br><span class="line">       &#x2F;&#x2F;构建邻接矩阵</span><br><span class="line">       int[][] matrix &#x3D; new int[iNodes][iNodes];</span><br><span class="line">       for (int i &#x3D; 0; i &lt; iNodes; i++ ) &#123;</span><br><span class="line">           Arrays.fill(matrix[i],MAXV);</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;最短距离表</span><br><span class="line">       int[] dis &#x3D; new int[iNodes];</span><br><span class="line">       Arrays.fill(dis,MAXV);</span><br><span class="line">       &#x2F;&#x2F;前驱节点</span><br><span class="line">       int[] pre  &#x3D; new int[iNodes];</span><br><span class="line">       &#x2F;&#x2F;邻接矩阵初始化</span><br><span class="line">       String[] path &#x3D; strInitPath.split(&quot;,&quot;);</span><br><span class="line">       for (int i &#x3D; 0 ; i &lt; path.length; i++) &#123;</span><br><span class="line">           matrix[path[i].charAt(0)-&#39;a&#39;][path[i].charAt(3)-&#39;a&#39;] &#x3D; Integer.valueOf(path[i].charAt(5)-&#39;0&#39;);</span><br><span class="line">       &#125;</span><br><span class="line">       for (int i &#x3D; 0 ; i &lt; iNodes; i++) &#123;</span><br><span class="line">           System.out.println(&quot;matrix is &quot; + Arrays.toString(matrix[i]));</span><br><span class="line">       &#125;</span><br><span class="line">       dis[Integer.valueOf(strStart.toCharArray()[0]-&#39;a&#39;)] &#x3D; 0;</span><br><span class="line">       for (int i &#x3D; 0; i &lt; iNodes; i++) &#123;</span><br><span class="line">           &#x2F;&#x2F;初始状态每个点前驱为自身</span><br><span class="line">           pre[i] &#x3D; i;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(&quot;pre first is &quot; + Arrays.toString(pre));</span><br><span class="line">       for (int i &#x3D; 0; i &lt; iNodes; i++) &#123;</span><br><span class="line">           int u &#x3D; -1, minn &#x3D; MAXV;</span><br><span class="line">           for (int j &#x3D; 0; j &lt; iNodes; j++) &#123;</span><br><span class="line">               if (visted[j] &#x3D;&#x3D; false &amp;&amp; dis[j] &lt; minn) &#123;</span><br><span class="line">                   u &#x3D; j;</span><br><span class="line">                   minn &#x3D; dis[j];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           if (u &#x3D;&#x3D; -1) return &quot;NONE&quot;;</span><br><span class="line">           visted[u] &#x3D; true;</span><br><span class="line">           for (int v &#x3D; 0; v &lt; iNodes; v++) &#123;</span><br><span class="line">               if (visted[v] &#x3D;&#x3D; false &amp;&amp; dis[u] + matrix[u][v] &lt; dis[v]) &#123;</span><br><span class="line">                   dis[v] &#x3D; dis[u] + matrix[u][v];</span><br><span class="line">                   pre[v] &#x3D; u;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(&quot;pre is &quot; + Arrays.toString(pre));</span><br><span class="line">       System.out.println(&quot;dis is &quot; + Arrays.toString(dis));</span><br><span class="line">       if (dis[Integer.valueOf(strEnd.toCharArray()[0]-&#39;a&#39;)] !&#x3D; MAXV) &#123;</span><br><span class="line">           int i &#x3D; Integer.valueOf(strEnd.toCharArray()[0]-&#39;a&#39;);</span><br><span class="line">           StringBuilder ans &#x3D; new StringBuilder();</span><br><span class="line">           ans.append(String.valueOf((char)(strEnd.toCharArray()[0])));</span><br><span class="line">           while (pre[i] !&#x3D; Integer.valueOf(strStart.toCharArray()[0]-&#39;a&#39;)) &#123;</span><br><span class="line">               ans.append(String.valueOf((char)(pre[i]+&#39;a&#39;)));</span><br><span class="line">               i &#x3D; pre[i];</span><br><span class="line">           &#125;</span><br><span class="line">           ans.append(String.valueOf((char)(pre[i]+&#39;a&#39;)));</span><br><span class="line">           return ans.reverse().toString();</span><br><span class="line">       &#125;</span><br><span class="line">       return &quot;NONE&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       ChengYanVisitor cy &#x3D; new ChengYanVisitor();</span><br><span class="line">       int iNodes;</span><br><span class="line">       String strInitPath;</span><br><span class="line">       String strStart;</span><br><span class="line">       String strEnd;</span><br><span class="line">       iNodes &#x3D; 8;</span><br><span class="line">       strInitPath &#x3D; &quot;a-&gt;b:4,b-&gt;h:1,b-&gt;e:2,e-&gt;d:1,h-&gt;g:1,h-&gt;c:2,g-&gt;f:2,g-&gt;c:5,f-&gt;c:2,c-&gt;d:1&quot;;</span><br><span class="line">       strStart &#x3D; &quot;a&quot;;</span><br><span class="line">       strEnd &#x3D; &quot;d&quot;;</span><br><span class="line">       System.out.println(&quot;ans is &quot; + cy.getShortestPath(iNodes,strInitPath,strStart,strEnd));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-思路"><a href="#4-思路" class="headerlink" title="4. 思路"></a>4. 思路</h1><p>可以参考此图理解</p><p><img src="/2020/07/09/DijkstraAlgorithm/clipboard.png" alt="avatar"></p><table><thead><tr><th>vertex</th><th>shortest distance from a</th><th>previous</th></tr></thead><tbody><tr><td>A</td><td>0</td><td></td></tr><tr><td>B</td><td>∞</td><td></td></tr><tr><td>C</td><td>∞</td><td></td></tr><tr><td>D</td><td>∞</td><td></td></tr><tr><td>E</td><td>∞</td><td></td></tr></tbody></table><p> 请填充此表，就可以得出答案~</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生感悟</title>
    <link href="/2020/07/09/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    <url>/2020/07/09/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-关于青春"><a href="#1-关于青春" class="headerlink" title="1.关于青春"></a>1.关于青春</h1><p>​      就在那时光的隧道里，总有一个瞬间，让你分不清自己是32岁还是22岁。总有一次相遇，让你无悔倾尽所有的过往。总有一幕场景，让你以为青春可以重新来过。总有一次回首，让你怎么也看不清自己年轻的模样。</p><h1 id="2-关于夜店"><a href="#2-关于夜店" class="headerlink" title="2. 关于夜店"></a>2. 关于夜店</h1><p>高端店基本没有。能被捡走的质量一般不会太好。高质量的身边一定有人护送。专车接送。得不到的才是最好的，这句话没错的。能轻易得到的东西。基本比较廉价。</p><h1 id="3-关于舔狗"><a href="#3-关于舔狗" class="headerlink" title="3.关于舔狗"></a>3.关于舔狗</h1><p>​        我们总是容易用一种自虐的方式制造出一种痴情的假象来使得自己站在感情的道德制高点上，获得一种畸形的满足感和安全感。其实无论是雪夜去对方家楼下站会儿或者是冒着大雨给她送一杯奶茶什么的，自己回想起来往往觉得如乔峰大战聚贤庄、关羽千里走单骑一样壮怀激烈，而对于对方来说，一杯奶茶就是一杯奶茶，无法承载起你想要在上面寄托的山崩地裂的情怀。少年的时候，总是迫不及待地将自己的满腔爱意表达出来，而结果往往是陷入表演之中而不自知。所以两个人的记忆才会出现偏差，那些你觉得刻骨铭心的过去，对方往往没有同样的感觉，甚至茫然不知。成长的标志就是懂得克制自己。克制自己的情绪，克制自己的表演欲，甚至克制自己的喜欢。少年时候，喜欢一个人恨不能把她变成自己身体的一部分，她刚说冷，我这边心里已经结冰了，她说难过，我立马如丧考妣，比她还难过，唯恐无法将自己的爱意表达出来。而事实上，谁也无法承担起另一个人的价值寄托，只有做一个独立、有价值的人，才能真正学会去爱另一个人。也千万不要尝试改变另一个人，这注定是徒劳的。做自己就好，爱情的真谛在于相互的吸引、志趣相投的同行，而不是追逐和依附以及自我感动。</p><h1 id="4-关于XX"><a href="#4-关于XX" class="headerlink" title="4. 关于XX"></a>4. 关于XX</h1><p>唾手可得的廉价多巴胺减少了多巴胺接收器，减少多巴胺接收器的症状是：</p><p> 易疲劳Fatigue </p><p>低性欲Low Libido </p><p>缺乏动机Lack of Motivation </p><p>丧失记忆Memory Loss </p><p>社交焦虑Social Anxiety </p><p>对糖渴望Sugar Craving </p><p>失眠Insomnia </p><p>情绪不稳定Mood Swings </p><p>难与他人建立关系Inability to Connect </p><p>难专注Inability to Focus </p><p>抑郁症Depression</p><h1 id="5-关于麻木"><a href="#5-关于麻木" class="headerlink" title="5. 关于麻木"></a>5. 关于麻木</h1><p>​        这两年一直一个人，很苦，每晚睡去，不知道第二天将为谁醒来，想笑的时候，不知道该对着睡笑，难过的时候只能对天大吼，无聊的时候只能自己发呆，想流泪又怕自己嘲笑自己，身边少了一个人，身心都没了温度，这两天才发现自己什么都没有，也没有人关心，害怕自己将变成一个没有用的人，所以才一心拼命工作。</p>]]></content>
    
    
    
    <tags>
      
      <tag>人生感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周末随记</title>
    <link href="/2020/06/21/%E5%91%A8%E6%9C%AB%E9%9A%8F%E8%AE%B0/"/>
    <url>/2020/06/21/%E5%91%A8%E6%9C%AB%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="端午节前的最后一个周末"><a href="#端午节前的最后一个周末" class="headerlink" title="端午节前的最后一个周末"></a>端午节前的最后一个周末</h1><h2 id="这个周末，我已经累计1个半月没回家了，很久没跟亲人们见过面，于是乎和我的哥哥约了一顿宵夜"><a href="#这个周末，我已经累计1个半月没回家了，很久没跟亲人们见过面，于是乎和我的哥哥约了一顿宵夜" class="headerlink" title="这个周末，我已经累计1个半月没回家了，很久没跟亲人们见过面，于是乎和我的哥哥约了一顿宵夜"></a>这个周末，我已经累计1个半月没回家了，很久没跟亲人们见过面，于是乎和我的哥哥约了一顿宵夜</h2><p><img src="/2020/06/21/%E5%91%A8%E6%9C%AB%E9%9A%8F%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200621024443.jpg" alt="avatar"></p><h3 id="吃了宵夜，撑到不行，又困，其实晚上十点就困了，到半夜三点多才回到家洗澡睡觉。有个小插曲是被的士司机绕路坑了钱，下次再遇到这样的司机记住他的编号投诉他。"><a href="#吃了宵夜，撑到不行，又困，其实晚上十点就困了，到半夜三点多才回到家洗澡睡觉。有个小插曲是被的士司机绕路坑了钱，下次再遇到这样的司机记住他的编号投诉他。" class="headerlink" title="吃了宵夜，撑到不行，又困，其实晚上十点就困了，到半夜三点多才回到家洗澡睡觉。有个小插曲是被的士司机绕路坑了钱，下次再遇到这样的司机记住他的编号投诉他。"></a>吃了宵夜，撑到不行，又困，其实晚上十点就困了，到半夜三点多才回到家洗澡睡觉。有个小插曲是被的士司机绕路坑了钱，下次再遇到这样的司机记住他的编号投诉他。</h3><h2 id="下午和草莓CP排位拉跨，拿出了我最佳英雄阿珂还是顶不住"><a href="#下午和草莓CP排位拉跨，拿出了我最佳英雄阿珂还是顶不住" class="headerlink" title="下午和草莓CP排位拉跨，拿出了我最佳英雄阿珂还是顶不住"></a>下午和草莓CP排位拉跨，拿出了我最佳英雄阿珂还是顶不住</h2><p><img src="/2020/06/21/%E5%91%A8%E6%9C%AB%E9%9A%8F%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200621024437.jpg" alt="avatar"></p><h2 id="独自莫凭栏，无限江山，别时容易见时难。"><a href="#独自莫凭栏，无限江山，别时容易见时难。" class="headerlink" title="独自莫凭栏，无限江山，别时容易见时难。"></a>独自莫凭栏，无限江山，别时容易见时难。</h2><p><img src="/2020/06/21/%E5%91%A8%E6%9C%AB%E9%9A%8F%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200621025946.png" alt="avatar"></p><h2 id="最后上两张5-20的图，自己体会"><a href="#最后上两张5-20的图，自己体会" class="headerlink" title="最后上两张5.20的图，自己体会"></a>最后上两张5.20的图，自己体会</h2><p><strong>2019年</strong></p><p><img src="/2020/06/21/%E5%91%A8%E6%9C%AB%E9%9A%8F%E8%AE%B0/wechat_20200621023739.jpg" alt="avatar"></p><p><strong>2020年</strong></p><p><img src="/2020/06/21/%E5%91%A8%E6%9C%AB%E9%9A%8F%E8%AE%B0/wechat_20200621023805.jpg" alt="avatar"></p><h1 id="祝你永远幸福。"><a href="#祝你永远幸福。" class="headerlink" title="祝你永远幸福。"></a>祝你永远幸福。</h1><p>​                                                                                                                                                                                  TowerLi</p><p>​                                                                                                                                                           2020-06-21 凌晨 3:01</p>]]></content>
    
    
    
    <tags>
      
      <tag>人生感悟</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>韬声依旧</title>
    <link href="/2020/06/19/%E9%9F%AC%E5%A3%B0%E4%BE%9D%E6%97%A7/"/>
    <url>/2020/06/19/%E9%9F%AC%E5%A3%B0%E4%BE%9D%E6%97%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="韬声依旧"><a href="#韬声依旧" class="headerlink" title="韬声依旧"></a>韬声依旧</h1><h2 id="春天應尋-因為春會老。莫等冬去-才把春天找。愛情應斷-因為情會老。"><a href="#春天應尋-因為春會老。莫等冬去-才把春天找。愛情應斷-因為情會老。" class="headerlink" title="春天應尋, 因為春會老。莫等冬去, 才把春天找。愛情應斷, 因為情會老。"></a>春天應尋, 因為春會老。莫等冬去, 才把春天找。愛情應斷, 因為情會老。</h2><h2 id="唯有爱得短暂，才能爱得永恒。"><a href="#唯有爱得短暂，才能爱得永恒。" class="headerlink" title="唯有爱得短暂，才能爱得永恒。"></a>唯有爱得短暂，才能爱得永恒。</h2><h2 id="不爱那么多，只爱一点点。别人眉来又眼去，我只偷看你一眼。"><a href="#不爱那么多，只爱一点点。别人眉来又眼去，我只偷看你一眼。" class="headerlink" title="不爱那么多，只爱一点点。别人眉来又眼去，我只偷看你一眼。"></a>不爱那么多，只爱一点点。别人眉来又眼去，我只偷看你一眼。</h2><p><img src="/2020/06/19/%E9%9F%AC%E5%A3%B0%E4%BE%9D%E6%97%A7/wechatPhoto_20200617221213.jpg" alt="avatar"></p>]]></content>
    
    
    
    <tags>
      
      <tag>人生感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
